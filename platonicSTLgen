#!/usr/bin/python
#
# Athanasios Athanassiadis
# August 2012
###########################
from __future__ import division
import os, sys, subprocess
import argparse
import numpy as np

# geometry stuff

polygons = {4: 'tetrahedron',
            6: 'hexahedron',
            8: 'octahedron',
            12: 'dodecahedron',
            20: 'icosahedron'}

# prefactors calculated from polehedra volume formulas
v2a = { 4: (lambda V: (12 * V / np.sqrt(2))**(1/3)),
        6: (lambda V: V**(1/3)),
        8: (lambda V: (3 * V / np.sqrt(2))**(1/3)),
        12: (lambda V: (4 * V / (15 + 7*np.sqrt(5)))**(1/3)),
        20: (lambda V: (12 * V / (5 * (3 + np.sqrt(5))))**(1/3)) 
        }

a2r = { 4: (lambda a: a * np.sqrt(3/8)),
        6: (lambda a: a * np.sqrt(3) / 2),
        8: (lambda a: a / np.sqrt(2)),
        12: (lambda a: a * np.sqrt(3) * (1 + np.sqrt(5) / 4)),
        20: (lambda a: a * (10 + 2 * np.sqrt(5)) / 4)
        }



if __name__ == "__main__":

    parser = argparse.ArgumentParser(\
        description="generate an openSCAD script to generate an array of polyhedra",\
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)


    NX0 = 10
    NY0 = 10
    NZ0 = 1
    DX0 = 1.5
    DY0 = 1.5
    DZ0 = 1.3
    R0 = 1

    parser.add_argument('poly', type=int, choices=polygons.keys(), help='polygon')
    parser.add_argument('-r', type=float, default=R0, help='polygon extremum radius (mm)')
    parser.add_argument('-s', type=int, nargs=3, default=[NX0,NY0,NZ0], help='array shape')
    parser.add_argument('-d', type=float, nargs=3, default=[DX0,DY0,DZ0], help='interparticle spacing')
    parser.add_argument('-v', type=float, default=0.0, help='desired particle volume in cm^3')
    parser.add_argument('-a', type=float, default=0.0, help='desired side length in mm')
    parser.add_argument('--cornellvol', action='store_true', help='match the cornell particle volume')

    parser.add_argument('outfile', type=str, help='outfile')
    
    args = parser.parse_args()
    p = args.poly
    polystr = polygons[p]
    r = args.r
    nx,ny,nz = args.s
    dx,dy,dz  = args.d
    v = args.v
    a = args.a
    cornellv = args.cornellvol
    outfile = args.outfile

    # volume specifier has precedence over edge length and radius

    print 'creating ' + polystr

    if cornellv:
        v = .0225 # mL
        print 'setting volume to v=%f cm^3' % v

    if v:
        a = v2a[p](v) * 10
        print 'setting edge length to a=%f mm' % a

    if a:
        r = a2r[p](a)
        print 'setting circumscribed radius to r=%f' % r


    outfile_base = os.path.split(outfile)[-1]
    outfile_base = os.path.splitext(outfile_base)[0]

    genoutfile = os.path.join('generated', outfile_base + '.scad')
    stloutfile = os.path.join('STL', outfile_base + '.stl')

    iterstr = ''
    k = 0
    for i in range(nx - (k%2)):
        for j in range(ny - (k%2)):
            for k in range(nz):
                iterstr += '[%6.6f,%6.6f,%6.6f],' % (i*dx*r + (dx * (k%2)), j*dy*r + (dx * (k%2)), k*dz*r)
    iterstr = iterstr[:-1]

    with open(genoutfile, 'w') as of:
        of.write('''// file autogenerated by platonicSTLgen
// author: thanasi athanassiadis (thanasi@uchicago.edu)
// august 25, 2012

include <../platonic.scad>

// units are mm

rad = %6.6f;

poly = %s(rad);

for(i = [ %s ])
{
    translate(i)
    display_polyhedron(poly);
}

module display_polyhedron(poly) 
{
polyhedron(points = poly[0], triangles = poly[1]);
}

''' % (r, polystr, iterstr))


    print 'wrote '+genoutfile

    # openscad -o STL/octarray.stl generated/octahedronarray.scad
    subprocess.call(['openscad', '-o%s' % stloutfile, genoutfile])

    print 'wrote '+stloutfile
