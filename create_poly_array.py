#!/usr/bin/python
#
# Athanasios Athanassiadis
# August 2012
###########################
import os, sys, subprocess
import argparse

polygons = {4: 'tetrahedron',
            6: 'hexahedron',
            8: 'octahedron',
            12: 'dodecahedron',
            20: 'icosahedron'}


if __name__ == "__main__":

    parser = argparse.ArgumentParser(\
        description="generate an openSCAD script to generate an array of polyhedra",\
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)


    NX0 = 10
    NY0 = 10
    NZ0 = 1
    DX0 = 2.2
    DY0 = 2.2
    DZ0 = 3
    R0 = 2.56468    # radius for octahedron to have same vol as Cornell particles

    parser.add_argument('poly', type=int, choices=polygons.keys(), help='polygon')
    parser.add_argument('-r', type=float, default=R0, help='polygon extremum radius')
    parser.add_argument('-s', type=int, nargs=3, default=[NX0,NY0,NZ0], help='array shape')
    parser.add_argument('-d', type=float, nargs=3, default=[DX0,DY0,DZ0], help='interparticle spacing')
    parser.add_argument('outfile', type=str, help='outfile')
    
    args = parser.parse_args()
    polystr = polygons[args.poly]
    r = args.r
    nx,ny,nz = args.s
    dx,dy,dz  = args.d
    outfile = args.outfile

    outfile_base = os.path.split(outfile)[-1]
    outfile_base = os.path.splitext(outfile_base)[0]

    genoutfile = os.path.join('generated', outfile_base + '.scad')
    stloutfile = os.path.join('STL', outfile_base + '.stl')

    iterstr = ''
    for i in range(nx):
        for j in range(ny):
            for k in range(nz):
                iterstr += '[%6.6f,%6.6f,%6.6f],' % (i*dx*r, j*dy*r, k*dz*r)
    iterstr = iterstr[:-1]

    with open(genoutfile, 'w') as of:
        of.write('''// file autogenerated by create_poly_array.py
// author: thanasi athanassiadis (thanasi@uchicago.edu)
// august 25, 2012

include <../platonic.scad>

// units are mm

rad = %6.6f;

poly = %s(rad);

for(i = [ %s ])
{
    translate(i)
    display_polyhedron(poly);
}

module display_polyhedron(poly) 
{
polyhedron(points = poly[0], triangles = poly[1]);
}

''' % (r, polystr, iterstr))


    print 'wrote '+genoutfile

    # openscad -o STL/octarray.stl generated/octahedronarray.scad
    subprocess.call(['openscad', '-o%s' % stloutfile, genoutfile])

    print 'wrote '+stloutfile
